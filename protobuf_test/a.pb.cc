// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: a.proto

#include "a.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Test {
constexpr MsgPathUnit::MsgPathUnit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct MsgPathUnitDefaultTypeInternal {
  constexpr MsgPathUnitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgPathUnitDefaultTypeInternal() {}
  union {
    MsgPathUnit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgPathUnitDefaultTypeInternal _MsgPathUnit_default_instance_;
constexpr Path::Path(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_(){}
struct PathDefaultTypeInternal {
  constexpr PathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathDefaultTypeInternal() {}
  union {
    Path _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathDefaultTypeInternal _Path_default_instance_;
constexpr MapPath_ConfigEntry_DoNotUse::MapPath_ConfigEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MapPath_ConfigEntry_DoNotUseDefaultTypeInternal {
  constexpr MapPath_ConfigEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MapPath_ConfigEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MapPath_ConfigEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MapPath_ConfigEntry_DoNotUseDefaultTypeInternal _MapPath_ConfigEntry_DoNotUse_default_instance_;
constexpr MapPath::MapPath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct MapPathDefaultTypeInternal {
  constexpr MapPathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MapPathDefaultTypeInternal() {}
  union {
    MapPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MapPathDefaultTypeInternal _MapPath_default_instance_;
constexpr Paths::Paths(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : p_()
  , _p_cached_byte_size_(0){}
struct PathsDefaultTypeInternal {
  constexpr PathsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathsDefaultTypeInternal() {}
  union {
    Paths _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathsDefaultTypeInternal _Paths_default_instance_;
constexpr MapConfig_ConfigEntry_DoNotUse::MapConfig_ConfigEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MapConfig_ConfigEntry_DoNotUseDefaultTypeInternal {
  constexpr MapConfig_ConfigEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MapConfig_ConfigEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MapConfig_ConfigEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MapConfig_ConfigEntry_DoNotUseDefaultTypeInternal _MapConfig_ConfigEntry_DoNotUse_default_instance_;
constexpr MapConfig::MapConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct MapConfigDefaultTypeInternal {
  constexpr MapConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MapConfigDefaultTypeInternal() {}
  union {
    MapConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MapConfigDefaultTypeInternal _MapConfig_default_instance_;
constexpr SpecConfig::SpecConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : s_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mappath_(nullptr)
  , mapconfig_(nullptr){}
struct SpecConfigDefaultTypeInternal {
  constexpr SpecConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecConfigDefaultTypeInternal() {}
  union {
    SpecConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecConfigDefaultTypeInternal _SpecConfig_default_instance_;
}  // namespace Test
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_a_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_a_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_a_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_a_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Test::MsgPathUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Test::MsgPathUnit, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Test::MsgPathUnit, PathUnit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Test::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Test::Path, unit_),
  PROTOBUF_FIELD_OFFSET(::Test::MapPath_ConfigEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Test::MapPath_ConfigEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Test::MapPath_ConfigEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Test::MapPath_ConfigEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Test::MapPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Test::MapPath, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Test::Paths, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Test::Paths, p_),
  PROTOBUF_FIELD_OFFSET(::Test::MapConfig_ConfigEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Test::MapConfig_ConfigEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Test::MapConfig_ConfigEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Test::MapConfig_ConfigEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Test::MapConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Test::MapConfig, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Test::SpecConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Test::SpecConfig, s_),
  PROTOBUF_FIELD_OFFSET(::Test::SpecConfig, mappath_),
  PROTOBUF_FIELD_OFFSET(::Test::SpecConfig, mapconfig_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Test::MsgPathUnit)},
  { 9, -1, -1, sizeof(::Test::Path)},
  { 16, 24, -1, sizeof(::Test::MapPath_ConfigEntry_DoNotUse)},
  { 26, -1, -1, sizeof(::Test::MapPath)},
  { 33, -1, -1, sizeof(::Test::Paths)},
  { 40, 48, -1, sizeof(::Test::MapConfig_ConfigEntry_DoNotUse)},
  { 50, -1, -1, sizeof(::Test::MapConfig)},
  { 57, -1, -1, sizeof(::Test::SpecConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Test::_MsgPathUnit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Test::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Test::_MapPath_ConfigEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Test::_MapPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Test::_Paths_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Test::_MapConfig_ConfigEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Test::_MapConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Test::_SpecConfig_default_instance_),
};

const char descriptor_table_protodef_a_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\007a.proto\022\004Test\"K\n\013MsgPathUnit\022\036\n\004freq\030\001"
  " \001(\0162\016.Test.PathFreqH\000\022\020\n\006normal\030\002 \001(\tH\000"
  "B\n\n\010PathUnit\"\'\n\004Path\022\037\n\004unit\030\001 \003(\0132\021.Tes"
  "t.MsgPathUnit\"o\n\007MapPath\022)\n\006Config\030\001 \003(\013"
  "2\031.Test.MapPath.ConfigEntry\0329\n\013ConfigEnt"
  "ry\022\013\n\003key\030\001 \001(\r\022\031\n\005value\030\002 \001(\0132\n.Test.Pa"
  "th:\0028\001\"\022\n\005Paths\022\t\n\001p\030\001 \003(\r\"t\n\tMapConfig\022"
  "+\n\006Config\030\001 \003(\0132\033.Test.MapConfig.ConfigE"
  "ntry\032:\n\013ConfigEntry\022\013\n\003key\030\001 \001(\t\022\032\n\005valu"
  "e\030\002 \001(\0132\013.Test.Paths:\0028\001\"[\n\nSpecConfig\022\t"
  "\n\001s\030\001 \001(\t\022\036\n\007mappath\030\002 \001(\0132\r.Test.MapPat"
  "h\022\"\n\tmapconfig\030\003 \001(\0132\017.Test.MapConfig*\371\001"
  "\n\010PathFreq\022\010\n\004HKLM\020\000\022\010\n\004HKCU\020\001\022\010\n\004HKCR\020\002"
  "\022\007\n\003HKU\020\003\022\010\n\004HKCC\020\004\022\t\n\005MODEL\020\005\022\017\n\013PRINTE"
  "RNAME\020\006\022\t\n\005SMWCP\020\007\022\016\n\nresevered8\020\010\022\016\n\nre"
  "severed9\020\t\022\017\n\013resevered10\020\n\022\017\n\013resevered"
  "11\020\013\022\017\n\013resevered12\020\014\022\017\n\013resevered13\020\r\022\017"
  "\n\013resevered14\020\016\022\017\n\013resevered15\020\017\022\017\n\013rese"
  "vered16\020\020b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_a_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_a_2eproto = {
  false, false, 737, descriptor_table_protodef_a_2eproto, "a.proto", 
  &descriptor_table_a_2eproto_once, nullptr, 0, 8,
  schemas, file_default_instances, TableStruct_a_2eproto::offsets,
  file_level_metadata_a_2eproto, file_level_enum_descriptors_a_2eproto, file_level_service_descriptors_a_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_a_2eproto_getter() {
  return &descriptor_table_a_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_a_2eproto(&descriptor_table_a_2eproto);
namespace Test {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PathFreq_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_a_2eproto);
  return file_level_enum_descriptors_a_2eproto[0];
}
bool PathFreq_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MsgPathUnit::_Internal {
 public:
};

MsgPathUnit::MsgPathUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Test.MsgPathUnit)
}
MsgPathUnit::MsgPathUnit(const MsgPathUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_PathUnit();
  switch (from.PathUnit_case()) {
    case kFreq: {
      _internal_set_freq(from._internal_freq());
      break;
    }
    case kNormal: {
      _internal_set_normal(from._internal_normal());
      break;
    }
    case PATHUNIT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Test.MsgPathUnit)
}

void MsgPathUnit::SharedCtor() {
clear_has_PathUnit();
}

MsgPathUnit::~MsgPathUnit() {
  // @@protoc_insertion_point(destructor:Test.MsgPathUnit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MsgPathUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_PathUnit()) {
    clear_PathUnit();
  }
}

void MsgPathUnit::ArenaDtor(void* object) {
  MsgPathUnit* _this = reinterpret_cast< MsgPathUnit* >(object);
  (void)_this;
}
void MsgPathUnit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgPathUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MsgPathUnit::clear_PathUnit() {
// @@protoc_insertion_point(one_of_clear_start:Test.MsgPathUnit)
  switch (PathUnit_case()) {
    case kFreq: {
      // No need to clear
      break;
    }
    case kNormal: {
      PathUnit_.normal_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case PATHUNIT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PATHUNIT_NOT_SET;
}


void MsgPathUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:Test.MsgPathUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_PathUnit();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgPathUnit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Test.PathFreq freq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_freq(static_cast<::Test::PathFreq>(val));
        } else
          goto handle_unusual;
        continue;
      // string normal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_normal();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Test.MsgPathUnit.normal"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgPathUnit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Test.MsgPathUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Test.PathFreq freq = 1;
  if (_internal_has_freq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_freq(), target);
  }

  // string normal = 2;
  if (_internal_has_normal()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_normal().data(), static_cast<int>(this->_internal_normal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Test.MsgPathUnit.normal");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_normal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Test.MsgPathUnit)
  return target;
}

size_t MsgPathUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Test.MsgPathUnit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (PathUnit_case()) {
    // .Test.PathFreq freq = 1;
    case kFreq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_freq());
      break;
    }
    // string normal = 2;
    case kNormal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_normal());
      break;
    }
    case PATHUNIT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgPathUnit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MsgPathUnit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgPathUnit::GetClassData() const { return &_class_data_; }

void MsgPathUnit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MsgPathUnit *>(to)->MergeFrom(
      static_cast<const MsgPathUnit &>(from));
}


void MsgPathUnit::MergeFrom(const MsgPathUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Test.MsgPathUnit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.PathUnit_case()) {
    case kFreq: {
      _internal_set_freq(from._internal_freq());
      break;
    }
    case kNormal: {
      _internal_set_normal(from._internal_normal());
      break;
    }
    case PATHUNIT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgPathUnit::CopyFrom(const MsgPathUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Test.MsgPathUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPathUnit::IsInitialized() const {
  return true;
}

void MsgPathUnit::InternalSwap(MsgPathUnit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(PathUnit_, other->PathUnit_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgPathUnit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_a_2eproto_getter, &descriptor_table_a_2eproto_once,
      file_level_metadata_a_2eproto[0]);
}

// ===================================================================

class Path::_Internal {
 public:
};

Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  unit_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Test.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unit_(from.unit_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Test.Path)
}

void Path::SharedCtor() {
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:Test.Path)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Path::ArenaDtor(void* object) {
  Path* _this = reinterpret_cast< Path* >(object);
  (void)_this;
}
void Path::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:Test.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Test.MsgPathUnit unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Test.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Test.MsgPathUnit unit = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_unit(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Test.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Test.Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Test.MsgPathUnit unit = 1;
  total_size += 1UL * this->_internal_unit_size();
  for (const auto& msg : this->unit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Path::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Path::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Path::GetClassData() const { return &_class_data_; }

void Path::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Path *>(to)->MergeFrom(
      static_cast<const Path &>(from));
}


void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Test.Path)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unit_.MergeFrom(from.unit_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Test.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  unit_.InternalSwap(&other->unit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_a_2eproto_getter, &descriptor_table_a_2eproto_once,
      file_level_metadata_a_2eproto[1]);
}

// ===================================================================

MapPath_ConfigEntry_DoNotUse::MapPath_ConfigEntry_DoNotUse() {}
MapPath_ConfigEntry_DoNotUse::MapPath_ConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapPath_ConfigEntry_DoNotUse::MergeFrom(const MapPath_ConfigEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapPath_ConfigEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_a_2eproto_getter, &descriptor_table_a_2eproto_once,
      file_level_metadata_a_2eproto[2]);
}

// ===================================================================

class MapPath::_Internal {
 public:
};

MapPath::MapPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  config_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Test.MapPath)
}
MapPath::MapPath(const MapPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  config_.MergeFrom(from.config_);
  // @@protoc_insertion_point(copy_constructor:Test.MapPath)
}

void MapPath::SharedCtor() {
}

MapPath::~MapPath() {
  // @@protoc_insertion_point(destructor:Test.MapPath)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MapPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MapPath::ArenaDtor(void* object) {
  MapPath* _this = reinterpret_cast< MapPath* >(object);
  (void)_this;
  _this->config_. ~MapField();
}
inline void MapPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &MapPath::ArenaDtor);
  }
}
void MapPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapPath::Clear() {
// @@protoc_insertion_point(message_clear_start:Test.MapPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, .Test.Path> Config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&config_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Test.MapPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .Test.Path> Config = 1;
  if (!this->_internal_config().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::Test::Path >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_config().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_config().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::Test::Path >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::Test::Path >::const_iterator
          it = this->_internal_config().begin();
          it != this->_internal_config().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MapPath_ConfigEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::Test::Path >::const_iterator
          it = this->_internal_config().begin();
          it != this->_internal_config().end(); ++it) {
        target = MapPath_ConfigEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Test.MapPath)
  return target;
}

size_t MapPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Test.MapPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .Test.Path> Config = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_config_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::Test::Path >::const_iterator
      it = this->_internal_config().begin();
      it != this->_internal_config().end(); ++it) {
    total_size += MapPath_ConfigEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapPath::GetClassData() const { return &_class_data_; }

void MapPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapPath *>(to)->MergeFrom(
      static_cast<const MapPath &>(from));
}


void MapPath::MergeFrom(const MapPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Test.MapPath)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_.MergeFrom(from.config_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapPath::CopyFrom(const MapPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Test.MapPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPath::IsInitialized() const {
  return true;
}

void MapPath::InternalSwap(MapPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  config_.InternalSwap(&other->config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapPath::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_a_2eproto_getter, &descriptor_table_a_2eproto_once,
      file_level_metadata_a_2eproto[3]);
}

// ===================================================================

class Paths::_Internal {
 public:
};

Paths::Paths(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  p_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Test.Paths)
}
Paths::Paths(const Paths& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      p_(from.p_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Test.Paths)
}

void Paths::SharedCtor() {
}

Paths::~Paths() {
  // @@protoc_insertion_point(destructor:Test.Paths)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Paths::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Paths::ArenaDtor(void* object) {
  Paths* _this = reinterpret_cast< Paths* >(object);
  (void)_this;
}
void Paths::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Paths::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Paths::Clear() {
// @@protoc_insertion_point(message_clear_start:Test.Paths)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  p_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Paths::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 p = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_p(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_p(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Paths::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Test.Paths)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 p = 1;
  {
    int byte_size = _p_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_p(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Test.Paths)
  return target;
}

size_t Paths::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Test.Paths)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 p = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->p_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _p_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Paths::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Paths::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Paths::GetClassData() const { return &_class_data_; }

void Paths::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Paths *>(to)->MergeFrom(
      static_cast<const Paths &>(from));
}


void Paths::MergeFrom(const Paths& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Test.Paths)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  p_.MergeFrom(from.p_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Paths::CopyFrom(const Paths& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Test.Paths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Paths::IsInitialized() const {
  return true;
}

void Paths::InternalSwap(Paths* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  p_.InternalSwap(&other->p_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Paths::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_a_2eproto_getter, &descriptor_table_a_2eproto_once,
      file_level_metadata_a_2eproto[4]);
}

// ===================================================================

MapConfig_ConfigEntry_DoNotUse::MapConfig_ConfigEntry_DoNotUse() {}
MapConfig_ConfigEntry_DoNotUse::MapConfig_ConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapConfig_ConfigEntry_DoNotUse::MergeFrom(const MapConfig_ConfigEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapConfig_ConfigEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_a_2eproto_getter, &descriptor_table_a_2eproto_once,
      file_level_metadata_a_2eproto[5]);
}

// ===================================================================

class MapConfig::_Internal {
 public:
};

MapConfig::MapConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  config_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Test.MapConfig)
}
MapConfig::MapConfig(const MapConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  config_.MergeFrom(from.config_);
  // @@protoc_insertion_point(copy_constructor:Test.MapConfig)
}

void MapConfig::SharedCtor() {
}

MapConfig::~MapConfig() {
  // @@protoc_insertion_point(destructor:Test.MapConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MapConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MapConfig::ArenaDtor(void* object) {
  MapConfig* _this = reinterpret_cast< MapConfig* >(object);
  (void)_this;
  _this->config_. ~MapField();
}
inline void MapConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &MapConfig::ArenaDtor);
  }
}
void MapConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Test.MapConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .Test.Paths> Config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&config_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Test.MapConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .Test.Paths> Config = 1;
  if (!this->_internal_config().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Test::Paths >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Test.MapConfig.ConfigEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_config().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_config().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Test::Paths >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Test::Paths >::const_iterator
          it = this->_internal_config().begin();
          it != this->_internal_config().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MapConfig_ConfigEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Test::Paths >::const_iterator
          it = this->_internal_config().begin();
          it != this->_internal_config().end(); ++it) {
        target = MapConfig_ConfigEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Test.MapConfig)
  return target;
}

size_t MapConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Test.MapConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .Test.Paths> Config = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_config_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Test::Paths >::const_iterator
      it = this->_internal_config().begin();
      it != this->_internal_config().end(); ++it) {
    total_size += MapConfig_ConfigEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapConfig::GetClassData() const { return &_class_data_; }

void MapConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapConfig *>(to)->MergeFrom(
      static_cast<const MapConfig &>(from));
}


void MapConfig::MergeFrom(const MapConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Test.MapConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_.MergeFrom(from.config_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapConfig::CopyFrom(const MapConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Test.MapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapConfig::IsInitialized() const {
  return true;
}

void MapConfig::InternalSwap(MapConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  config_.InternalSwap(&other->config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_a_2eproto_getter, &descriptor_table_a_2eproto_once,
      file_level_metadata_a_2eproto[6]);
}

// ===================================================================

class SpecConfig::_Internal {
 public:
  static const ::Test::MapPath& mappath(const SpecConfig* msg);
  static const ::Test::MapConfig& mapconfig(const SpecConfig* msg);
};

const ::Test::MapPath&
SpecConfig::_Internal::mappath(const SpecConfig* msg) {
  return *msg->mappath_;
}
const ::Test::MapConfig&
SpecConfig::_Internal::mapconfig(const SpecConfig* msg) {
  return *msg->mapconfig_;
}
SpecConfig::SpecConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Test.SpecConfig)
}
SpecConfig::SpecConfig(const SpecConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s().empty()) {
    s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_mappath()) {
    mappath_ = new ::Test::MapPath(*from.mappath_);
  } else {
    mappath_ = nullptr;
  }
  if (from._internal_has_mapconfig()) {
    mapconfig_ = new ::Test::MapConfig(*from.mapconfig_);
  } else {
    mapconfig_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Test.SpecConfig)
}

void SpecConfig::SharedCtor() {
s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mappath_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mapconfig_) -
    reinterpret_cast<char*>(&mappath_)) + sizeof(mapconfig_));
}

SpecConfig::~SpecConfig() {
  // @@protoc_insertion_point(destructor:Test.SpecConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpecConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  s_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mappath_;
  if (this != internal_default_instance()) delete mapconfig_;
}

void SpecConfig::ArenaDtor(void* object) {
  SpecConfig* _this = reinterpret_cast< SpecConfig* >(object);
  (void)_this;
}
void SpecConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Test.SpecConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && mappath_ != nullptr) {
    delete mappath_;
  }
  mappath_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mapconfig_ != nullptr) {
    delete mapconfig_;
  }
  mapconfig_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_s();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Test.SpecConfig.s"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Test.MapPath mappath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mappath(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Test.MapConfig mapconfig = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapconfig(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Test.SpecConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string s = 1;
  if (!this->_internal_s().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s().data(), static_cast<int>(this->_internal_s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Test.SpecConfig.s");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s(), target);
  }

  // .Test.MapPath mappath = 2;
  if (this->_internal_has_mappath()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mappath(this), target, stream);
  }

  // .Test.MapConfig mapconfig = 3;
  if (this->_internal_has_mapconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mapconfig(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Test.SpecConfig)
  return target;
}

size_t SpecConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Test.SpecConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s = 1;
  if (!this->_internal_s().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s());
  }

  // .Test.MapPath mappath = 2;
  if (this->_internal_has_mappath()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mappath_);
  }

  // .Test.MapConfig mapconfig = 3;
  if (this->_internal_has_mapconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mapconfig_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpecConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecConfig::GetClassData() const { return &_class_data_; }

void SpecConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpecConfig *>(to)->MergeFrom(
      static_cast<const SpecConfig &>(from));
}


void SpecConfig::MergeFrom(const SpecConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Test.SpecConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s().empty()) {
    _internal_set_s(from._internal_s());
  }
  if (from._internal_has_mappath()) {
    _internal_mutable_mappath()->::Test::MapPath::MergeFrom(from._internal_mappath());
  }
  if (from._internal_has_mapconfig()) {
    _internal_mutable_mapconfig()->::Test::MapConfig::MergeFrom(from._internal_mapconfig());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecConfig::CopyFrom(const SpecConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Test.SpecConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecConfig::IsInitialized() const {
  return true;
}

void SpecConfig::InternalSwap(SpecConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s_, lhs_arena,
      &other->s_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecConfig, mapconfig_)
      + sizeof(SpecConfig::mapconfig_)
      - PROTOBUF_FIELD_OFFSET(SpecConfig, mappath_)>(
          reinterpret_cast<char*>(&mappath_),
          reinterpret_cast<char*>(&other->mappath_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_a_2eproto_getter, &descriptor_table_a_2eproto_once,
      file_level_metadata_a_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Test
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Test::MsgPathUnit* Arena::CreateMaybeMessage< ::Test::MsgPathUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Test::MsgPathUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::Test::Path* Arena::CreateMaybeMessage< ::Test::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Test::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::Test::MapPath_ConfigEntry_DoNotUse* Arena::CreateMaybeMessage< ::Test::MapPath_ConfigEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Test::MapPath_ConfigEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Test::MapPath* Arena::CreateMaybeMessage< ::Test::MapPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Test::MapPath >(arena);
}
template<> PROTOBUF_NOINLINE ::Test::Paths* Arena::CreateMaybeMessage< ::Test::Paths >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Test::Paths >(arena);
}
template<> PROTOBUF_NOINLINE ::Test::MapConfig_ConfigEntry_DoNotUse* Arena::CreateMaybeMessage< ::Test::MapConfig_ConfigEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Test::MapConfig_ConfigEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Test::MapConfig* Arena::CreateMaybeMessage< ::Test::MapConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Test::MapConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::Test::SpecConfig* Arena::CreateMaybeMessage< ::Test::SpecConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Test::SpecConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
